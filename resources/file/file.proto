syntax = "proto3";

option go_package = "github.com/changpro/disk-service/pbdeps/file";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "google/protobuf/struct.proto";

service FileService {
    
    rpc UploadFile(UploadFileReq) returns (UploadFileRsp) {
        option (google.api.http) = {
            post: "/v1/{user_id}/files/upload"
            body: "*"
        };
    }

    rpc GetDirsAndFiles(GetDirsAndFilesReq) returns (GetDirsAndFilesRsp) {
        option (google.api.http) = {
            get: "/v1/{user_id}/files"
        };
    }

    rpc GetFileDetail (GetFileDetailReq) returns (GetFileDetailRsp) {
        option (google.api.http) = {
            get: "/v1/{user_id}/files/{file_name}"
        };
    }

    rpc MakeNewFolder (MakeNewFolderReq) returns (MakeNewFolderRsp) {
        option (google.api.http) = {
            post: "/v1/{user_id}/files/makedir"
            body: "*"
        };
    }

    rpc MoveToRecycleBin (MoveToRecycleBinReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/{user_id}/files/recycle"
            body: "*"
        };
    }

    rpc GetRecycleBinList (GetRecycleBinListReq) returns (GetRecycleBinListRsp) {
        option (google.api.http) = {
            get: "/v1/{user_id}/files/recycle-bin"
        };
    }

    rpc SoftDelete (SoftDeleteReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/{user_id}/files/delete"
            body: "*"
        };
    }

    rpc HardDelete (HardDeleteReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/{user_id}/files/hard-delete"
            body: "*"
        };
    }

    rpc Rename (RenameReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/{user_id}/files/rename"
            body: "*"
        };
    }

    rpc MoveToPath (MoveToPathReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/{user_id}/files/move"
            body: "*"
        };
    }

    rpc CopyToPath (CopyToPathReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/{user_id}/files/copy"
            body: "*"
        };
    }

    rpc CreateShare (CreateShareReq) returns (CreateShareRsp) {
        option (google.api.http) = {
            post: "/v1/{user_id}/files/create-share"
            body: "*"
        };
    }

    rpc RetrieveShareToPath (RetrieveShareToPathReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/{user_id}/files/save-from-share"
            body: "*"
        };
    }

    rpc GetShareRecords (GetShareRecordsReq) returns (GetShareRecordsRsp) {
        option (google.api.http) = {
            get: "/v1/{user_id}/files/share-records"
        };
    }
}

message UploadFileReq {
    string file_name = 1;
    string file_size = 2;
    string file_md5 = 3;
    string user_id = 4;
}

message UploadFileRsp {
    string file_id = 1;
}

message GetDirsAndFilesReq {
    string user_id = 1;
    string path = 2;
    bool show_hide = 3; // display(true) hidden dirs & files or not(false)
}

message GetDirsAndFilesRsp {
    repeated google.protobuf.Struct details = 1;
}

message GetFileDetailReq {
    string user_id = 1;
    string file_id = 2;
    string file_name = 3;
}

message GetFileDetailRsp {
    string id = 1;
    string name = 2;
    int64  size = 3;
    string type = 4;
    string md5 = 5;
    string path = 6;
    int32 status = 7;
    string create_time = 8;
    string update_time = 9;
}

message MakeNewFolderReq {
    string user_id = 1;
    string path = 2;
    string dir_name = 3;
    int32 overwrite = 4; // overwrite(1) if already exist, or not(2)
}

message MakeNewFolderRsp {
    string id = 1;
}

message MoveToRecycleBinReq {
    string user_id = 1;
    repeated string id = 2;
}

message SoftDeleteReq {
    string user_id = 1;
    repeated string id = 2;
}

message HardDeleteReq {
    string user_id = 1;
    string id = 2;
}

message RenameReq {
    string user_id = 1;
    string id = 2;
    string new_name = 3;
    int32 overwrite = 4; // overwrite(1) if already exist, or not(2)
}

message MoveToPathReq {
    string user_id = 1;
    repeated string ids = 2;
    string path = 3;
    int32 overwrite = 4; // overwrite(1) if already exist, or not(2)
}

message CopyToPathReq {
    string user_id = 1;
    repeated string ids = 2;
    string path = 3;
    int32 overwrite = 4; // overwrite(1) if already exist, or not(2)
}

message CreateShareReq {
    string user_id = 1;
    string id = 2;
    int32 expire_hour = 3;
}

message CreateShareRsp {
    string token = 1;
}

message RetrieveShareToPathReq {
    string user_id = 1;
    string token = 2;
    string path = 3;
}

message GetShareRecordsReq {
    string user_id = 1;
}

message GetShareRecordsRsp {
    repeated ShareRecord records = 1;
}

message ShareRecord {
    string file_name = 1;
    string message = 2;
    string op_time = 3;
}

message GetRecycleBinListReq {
    string user_id = 1;
}

message RecycleDocInfo {
    string id = 1;
    string name = 2;
    string delete_time = 3;
}

message GetRecycleBinListRsp {
    repeated RecycleDocInfo list = 1;
}