// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gateway.proto

package stub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayServiceClient interface {
	RegisterNewUser(ctx context.Context, in *RegisterNewUserReq, opts ...grpc.CallOption) (*CommonHttpRsp, error)
	SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*CommonHttpRsp, error)
	SetIcon(ctx context.Context, in *SetIconReq, opts ...grpc.CallOption) (*CommonHttpRsp, error)
	ModifyPassword(ctx context.Context, in *ModifyPasswordReq, opts ...grpc.CallOption) (*CommonHttpRsp, error)
	GetUserProfile(ctx context.Context, in *GetUserProfileReq, opts ...grpc.CallOption) (*CommonHttpRsp, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) RegisterNewUser(ctx context.Context, in *RegisterNewUserReq, opts ...grpc.CallOption) (*CommonHttpRsp, error) {
	out := new(CommonHttpRsp)
	err := c.cc.Invoke(ctx, "/disk.GatewayService/RegisterNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*CommonHttpRsp, error) {
	out := new(CommonHttpRsp)
	err := c.cc.Invoke(ctx, "/disk.GatewayService/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) SetIcon(ctx context.Context, in *SetIconReq, opts ...grpc.CallOption) (*CommonHttpRsp, error) {
	out := new(CommonHttpRsp)
	err := c.cc.Invoke(ctx, "/disk.GatewayService/SetIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ModifyPassword(ctx context.Context, in *ModifyPasswordReq, opts ...grpc.CallOption) (*CommonHttpRsp, error) {
	out := new(CommonHttpRsp)
	err := c.cc.Invoke(ctx, "/disk.GatewayService/ModifyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileReq, opts ...grpc.CallOption) (*CommonHttpRsp, error) {
	out := new(CommonHttpRsp)
	err := c.cc.Invoke(ctx, "/disk.GatewayService/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations should embed UnimplementedGatewayServiceServer
// for forward compatibility
type GatewayServiceServer interface {
	RegisterNewUser(context.Context, *RegisterNewUserReq) (*CommonHttpRsp, error)
	SignIn(context.Context, *SignInReq) (*CommonHttpRsp, error)
	SetIcon(context.Context, *SetIconReq) (*CommonHttpRsp, error)
	ModifyPassword(context.Context, *ModifyPasswordReq) (*CommonHttpRsp, error)
	GetUserProfile(context.Context, *GetUserProfileReq) (*CommonHttpRsp, error)
}

// UnimplementedGatewayServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGatewayServiceServer struct {
}

func (UnimplementedGatewayServiceServer) RegisterNewUser(context.Context, *RegisterNewUserReq) (*CommonHttpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewUser not implemented")
}
func (UnimplementedGatewayServiceServer) SignIn(context.Context, *SignInReq) (*CommonHttpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedGatewayServiceServer) SetIcon(context.Context, *SetIconReq) (*CommonHttpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIcon not implemented")
}
func (UnimplementedGatewayServiceServer) ModifyPassword(context.Context, *ModifyPasswordReq) (*CommonHttpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPassword not implemented")
}
func (UnimplementedGatewayServiceServer) GetUserProfile(context.Context, *GetUserProfileReq) (*CommonHttpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_RegisterNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNewUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RegisterNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disk.GatewayService/RegisterNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RegisterNewUser(ctx, req.(*RegisterNewUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disk.GatewayService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).SignIn(ctx, req.(*SignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_SetIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIconReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).SetIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disk.GatewayService/SetIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).SetIcon(ctx, req.(*SetIconReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ModifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ModifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disk.GatewayService/ModifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ModifyPassword(ctx, req.(*ModifyPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disk.GatewayService/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetUserProfile(ctx, req.(*GetUserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "disk.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNewUser",
			Handler:    _GatewayService_RegisterNewUser_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _GatewayService_SignIn_Handler,
		},
		{
			MethodName: "SetIcon",
			Handler:    _GatewayService_SetIcon_Handler,
		},
		{
			MethodName: "ModifyPassword",
			Handler:    _GatewayService_ModifyPassword_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _GatewayService_GetUserProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}
