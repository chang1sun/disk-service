// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: diskapis.proto

package stub

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterNewUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthEmail string `protobuf:"bytes,2,opt,name=auth_email,json=authEmail,proto3" json:"auth_email,omitempty"`
	Pw        string `protobuf:"bytes,3,opt,name=pw,proto3" json:"pw,omitempty"`
}

func (x *RegisterNewUserReq) Reset() {
	*x = RegisterNewUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterNewUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNewUserReq) ProtoMessage() {}

func (x *RegisterNewUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNewUserReq.ProtoReflect.Descriptor instead.
func (*RegisterNewUserReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterNewUserReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RegisterNewUserReq) GetAuthEmail() string {
	if x != nil {
		return x.AuthEmail
	}
	return ""
}

func (x *RegisterNewUserReq) GetPw() string {
	if x != nil {
		return x.Pw
	}
	return ""
}

type SignInReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Pw     string `protobuf:"bytes,2,opt,name=pw,proto3" json:"pw,omitempty"`
}

func (x *SignInReq) Reset() {
	*x = SignInReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInReq) ProtoMessage() {}

func (x *SignInReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInReq.ProtoReflect.Descriptor instead.
func (*SignInReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{1}
}

func (x *SignInReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SignInReq) GetPw() string {
	if x != nil {
		return x.Pw
	}
	return ""
}

type SignInRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SignInRsp) Reset() {
	*x = SignInRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInRsp) ProtoMessage() {}

func (x *SignInRsp) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInRsp.ProtoReflect.Descriptor instead.
func (*SignInRsp) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{2}
}

func (x *SignInRsp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ModifyPasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OldPw     string `protobuf:"bytes,2,opt,name=old_pw,json=oldPw,proto3" json:"old_pw,omitempty"` // need either old_pw or auth_email, not both
	AuthEmail string `protobuf:"bytes,3,opt,name=auth_email,json=authEmail,proto3" json:"auth_email,omitempty"`
	NewPw     string `protobuf:"bytes,4,opt,name=new_pw,json=newPw,proto3" json:"new_pw,omitempty"`
}

func (x *ModifyPasswordReq) Reset() {
	*x = ModifyPasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPasswordReq) ProtoMessage() {}

func (x *ModifyPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPasswordReq.ProtoReflect.Descriptor instead.
func (*ModifyPasswordReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{3}
}

func (x *ModifyPasswordReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ModifyPasswordReq) GetOldPw() string {
	if x != nil {
		return x.OldPw
	}
	return ""
}

func (x *ModifyPasswordReq) GetAuthEmail() string {
	if x != nil {
		return x.AuthEmail
	}
	return ""
}

func (x *ModifyPasswordReq) GetNewPw() string {
	if x != nil {
		return x.NewPw
	}
	return ""
}

type GetUserProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserProfileReq) Reset() {
	*x = GetUserProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserProfileReq) ProtoMessage() {}

func (x *GetUserProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserProfileReq.ProtoReflect.Descriptor instead.
func (*GetUserProfileReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserProfileReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserProfileRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon          string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	RegisterTime  string `protobuf:"bytes,2,opt,name=register_time,json=registerTime,proto3" json:"register_time,omitempty"`
	FileNum       int32  `protobuf:"varint,3,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
	FileUploadNum int32  `protobuf:"varint,4,opt,name=file_upload_num,json=fileUploadNum,proto3" json:"file_upload_num,omitempty"`
	AuthEmail     string `protobuf:"bytes,5,opt,name=auth_email,json=authEmail,proto3" json:"auth_email,omitempty"`
	UsedSize      int64  `protobuf:"varint,6,opt,name=used_size,json=usedSize,proto3" json:"used_size,omitempty"`
	TotalSize     int64  `protobuf:"varint,7,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *GetUserProfileRsp) Reset() {
	*x = GetUserProfileRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserProfileRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserProfileRsp) ProtoMessage() {}

func (x *GetUserProfileRsp) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserProfileRsp.ProtoReflect.Descriptor instead.
func (*GetUserProfileRsp) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserProfileRsp) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *GetUserProfileRsp) GetRegisterTime() string {
	if x != nil {
		return x.RegisterTime
	}
	return ""
}

func (x *GetUserProfileRsp) GetFileNum() int32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

func (x *GetUserProfileRsp) GetFileUploadNum() int32 {
	if x != nil {
		return x.FileUploadNum
	}
	return 0
}

func (x *GetUserProfileRsp) GetAuthEmail() string {
	if x != nil {
		return x.AuthEmail
	}
	return ""
}

func (x *GetUserProfileRsp) GetUsedSize() int64 {
	if x != nil {
		return x.UsedSize
	}
	return 0
}

func (x *GetUserProfileRsp) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type ModifyUserProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthEmail string `protobuf:"bytes,2,opt,name=auth_email,json=authEmail,proto3" json:"auth_email,omitempty"`
	Icon      string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *ModifyUserProfileReq) Reset() {
	*x = ModifyUserProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyUserProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyUserProfileReq) ProtoMessage() {}

func (x *ModifyUserProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyUserProfileReq.ProtoReflect.Descriptor instead.
func (*ModifyUserProfileReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{6}
}

func (x *ModifyUserProfileReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ModifyUserProfileReq) GetAuthEmail() string {
	if x != nil {
		return x.AuthEmail
	}
	return ""
}

func (x *ModifyUserProfileReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type UpdateUserStorageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FileNum       int32  `protobuf:"varint,2,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
	Size          int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	UploadFileNum int32  `protobuf:"varint,4,opt,name=upload_file_num,json=uploadFileNum,proto3" json:"upload_file_num,omitempty"`
}

func (x *UpdateUserStorageReq) Reset() {
	*x = UpdateUserStorageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStorageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStorageReq) ProtoMessage() {}

func (x *UpdateUserStorageReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStorageReq.ProtoReflect.Descriptor instead.
func (*UpdateUserStorageReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateUserStorageReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserStorageReq) GetFileNum() int32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

func (x *UpdateUserStorageReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UpdateUserStorageReq) GetUploadFileNum() int32 {
	if x != nil {
		return x.UploadFileNum
	}
	return 0
}

type UploadFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileSize string `protobuf:"bytes,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	FileMd5  string `protobuf:"bytes,3,opt,name=file_md5,json=fileMd5,proto3" json:"file_md5,omitempty"`
	UserId   string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UploadFileReq) Reset() {
	*x = UploadFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileReq) ProtoMessage() {}

func (x *UploadFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileReq.ProtoReflect.Descriptor instead.
func (*UploadFileReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{8}
}

func (x *UploadFileReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadFileReq) GetFileSize() string {
	if x != nil {
		return x.FileSize
	}
	return ""
}

func (x *UploadFileReq) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

func (x *UploadFileReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UploadFileRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (x *UploadFileRsp) Reset() {
	*x = UploadFileRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileRsp) ProtoMessage() {}

func (x *UploadFileRsp) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileRsp.ProtoReflect.Descriptor instead.
func (*UploadFileRsp) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{9}
}

func (x *UploadFileRsp) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type GetDirsAndFilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	ShowHide bool   `protobuf:"varint,3,opt,name=show_hide,json=showHide,proto3" json:"show_hide,omitempty"` // display(true) hidden dirs & files or not(false)
}

func (x *GetDirsAndFilesReq) Reset() {
	*x = GetDirsAndFilesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDirsAndFilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDirsAndFilesReq) ProtoMessage() {}

func (x *GetDirsAndFilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDirsAndFilesReq.ProtoReflect.Descriptor instead.
func (*GetDirsAndFilesReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{10}
}

func (x *GetDirsAndFilesReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetDirsAndFilesReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetDirsAndFilesReq) GetShowHide() bool {
	if x != nil {
		return x.ShowHide
	}
	return false
}

type GetDirsAndFilesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*structpb.Struct `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *GetDirsAndFilesRsp) Reset() {
	*x = GetDirsAndFilesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDirsAndFilesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDirsAndFilesRsp) ProtoMessage() {}

func (x *GetDirsAndFilesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDirsAndFilesRsp.ProtoReflect.Descriptor instead.
func (*GetDirsAndFilesRsp) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{11}
}

func (x *GetDirsAndFilesRsp) GetDetails() []*structpb.Struct {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetFileDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FileId   string `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *GetFileDetailReq) Reset() {
	*x = GetFileDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileDetailReq) ProtoMessage() {}

func (x *GetFileDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileDetailReq.ProtoReflect.Descriptor instead.
func (*GetFileDetailReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{12}
}

func (x *GetFileDetailReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetFileDetailReq) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *GetFileDetailReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type GetFileDetailRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Size       int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Type       string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Md5        string `protobuf:"bytes,5,opt,name=md5,proto3" json:"md5,omitempty"`
	Path       string `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	Status     int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime string `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime string `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *GetFileDetailRsp) Reset() {
	*x = GetFileDetailRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileDetailRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileDetailRsp) ProtoMessage() {}

func (x *GetFileDetailRsp) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileDetailRsp.ProtoReflect.Descriptor instead.
func (*GetFileDetailRsp) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{13}
}

func (x *GetFileDetailRsp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetFileDetailRsp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetFileDetailRsp) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetFileDetailRsp) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetFileDetailRsp) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *GetFileDetailRsp) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetFileDetailRsp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetFileDetailRsp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *GetFileDetailRsp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type MakeNewFolderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Path      string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	DirName   string `protobuf:"bytes,3,opt,name=dir_name,json=dirName,proto3" json:"dir_name,omitempty"`
	Overwrite int32  `protobuf:"varint,4,opt,name=overwrite,proto3" json:"overwrite,omitempty"` // overwrite(1) if already exist, or not(2)
}

func (x *MakeNewFolderReq) Reset() {
	*x = MakeNewFolderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeNewFolderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeNewFolderReq) ProtoMessage() {}

func (x *MakeNewFolderReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeNewFolderReq.ProtoReflect.Descriptor instead.
func (*MakeNewFolderReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{14}
}

func (x *MakeNewFolderReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MakeNewFolderReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MakeNewFolderReq) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

func (x *MakeNewFolderReq) GetOverwrite() int32 {
	if x != nil {
		return x.Overwrite
	}
	return 0
}

type MakeNewFolderRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MakeNewFolderRsp) Reset() {
	*x = MakeNewFolderRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeNewFolderRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeNewFolderRsp) ProtoMessage() {}

func (x *MakeNewFolderRsp) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeNewFolderRsp.ProtoReflect.Descriptor instead.
func (*MakeNewFolderRsp) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{15}
}

func (x *MakeNewFolderRsp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SetHiddenDocReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ids        []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	HideStatus int32    `protobuf:"varint,3,opt,name=hide_status,json=hideStatus,proto3" json:"hide_status,omitempty"` // hide(1) or not(2)
}

func (x *SetHiddenDocReq) Reset() {
	*x = SetHiddenDocReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHiddenDocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHiddenDocReq) ProtoMessage() {}

func (x *SetHiddenDocReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHiddenDocReq.ProtoReflect.Descriptor instead.
func (*SetHiddenDocReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{16}
}

func (x *SetHiddenDocReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetHiddenDocReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SetHiddenDocReq) GetHideStatus() int32 {
	if x != nil {
		return x.HideStatus
	}
	return 0
}

type MoveToRecycleBinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ids    []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *MoveToRecycleBinReq) Reset() {
	*x = MoveToRecycleBinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveToRecycleBinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveToRecycleBinReq) ProtoMessage() {}

func (x *MoveToRecycleBinReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveToRecycleBinReq.ProtoReflect.Descriptor instead.
func (*MoveToRecycleBinReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{17}
}

func (x *MoveToRecycleBinReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MoveToRecycleBinReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type SoftDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ids    []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *SoftDeleteReq) Reset() {
	*x = SoftDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftDeleteReq) ProtoMessage() {}

func (x *SoftDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftDeleteReq.ProtoReflect.Descriptor instead.
func (*SoftDeleteReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{18}
}

func (x *SoftDeleteReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SoftDeleteReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type HardDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ids    string `protobuf:"bytes,2,opt,name=ids,proto3" json:"ids,omitempty"`
}

func (x *HardDeleteReq) Reset() {
	*x = HardDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardDeleteReq) ProtoMessage() {}

func (x *HardDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardDeleteReq.ProtoReflect.Descriptor instead.
func (*HardDeleteReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{19}
}

func (x *HardDeleteReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HardDeleteReq) GetIds() string {
	if x != nil {
		return x.Ids
	}
	return ""
}

type RenameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	NewName   string `protobuf:"bytes,3,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	Overwrite int32  `protobuf:"varint,4,opt,name=overwrite,proto3" json:"overwrite,omitempty"` // overwrite(1) if already exist, or not(2)
}

func (x *RenameReq) Reset() {
	*x = RenameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameReq) ProtoMessage() {}

func (x *RenameReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameReq.ProtoReflect.Descriptor instead.
func (*RenameReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{20}
}

func (x *RenameReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RenameReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RenameReq) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *RenameReq) GetOverwrite() int32 {
	if x != nil {
		return x.Overwrite
	}
	return 0
}

type MoveToPathReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ids       []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	Path      string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Overwrite int32    `protobuf:"varint,4,opt,name=overwrite,proto3" json:"overwrite,omitempty"` // overwrite(1) if already exist, or not(2)
}

func (x *MoveToPathReq) Reset() {
	*x = MoveToPathReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveToPathReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveToPathReq) ProtoMessage() {}

func (x *MoveToPathReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveToPathReq.ProtoReflect.Descriptor instead.
func (*MoveToPathReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{21}
}

func (x *MoveToPathReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MoveToPathReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *MoveToPathReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MoveToPathReq) GetOverwrite() int32 {
	if x != nil {
		return x.Overwrite
	}
	return 0
}

type CopyToPathReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ids       []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	Path      string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Overwrite int32    `protobuf:"varint,4,opt,name=overwrite,proto3" json:"overwrite,omitempty"` // overwrite(1) if already exist, or not(2)
}

func (x *CopyToPathReq) Reset() {
	*x = CopyToPathReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyToPathReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyToPathReq) ProtoMessage() {}

func (x *CopyToPathReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyToPathReq.ProtoReflect.Descriptor instead.
func (*CopyToPathReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{22}
}

func (x *CopyToPathReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CopyToPathReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *CopyToPathReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CopyToPathReq) GetOverwrite() int32 {
	if x != nil {
		return x.Overwrite
	}
	return 0
}

type CreateShareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DocId      string `protobuf:"bytes,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	ExpireHour int32  `protobuf:"varint,4,opt,name=expire_hour,json=expireHour,proto3" json:"expire_hour,omitempty"`
}

func (x *CreateShareReq) Reset() {
	*x = CreateShareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShareReq) ProtoMessage() {}

func (x *CreateShareReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShareReq.ProtoReflect.Descriptor instead.
func (*CreateShareReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{23}
}

func (x *CreateShareReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateShareReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *CreateShareReq) GetExpireHour() int32 {
	if x != nil {
		return x.ExpireHour
	}
	return 0
}

type CreateShareRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *CreateShareRsp) Reset() {
	*x = CreateShareRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShareRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShareRsp) ProtoMessage() {}

func (x *CreateShareRsp) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShareRsp.ProtoReflect.Descriptor instead.
func (*CreateShareRsp) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{24}
}

func (x *CreateShareRsp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CreateShareRsp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RetrieveShareToPathReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Path   string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RetrieveShareToPathReq) Reset() {
	*x = RetrieveShareToPathReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveShareToPathReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveShareToPathReq) ProtoMessage() {}

func (x *RetrieveShareToPathReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveShareToPathReq.ProtoReflect.Descriptor instead.
func (*RetrieveShareToPathReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{25}
}

func (x *RetrieveShareToPathReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RetrieveShareToPathReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RetrieveShareToPathReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type GetShareDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *GetShareDetailReq) Reset() {
	*x = GetShareDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareDetailReq) ProtoMessage() {}

func (x *GetShareDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareDetailReq.ProtoReflect.Descriptor instead.
func (*GetShareDetailReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{26}
}

func (x *GetShareDetailReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetShareDetailReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type GetShareDetailRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uploader   string `protobuf:"bytes,1,opt,name=uploader,proto3" json:"uploader,omitempty"`
	DocId      string `protobuf:"bytes,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	DocName    string `protobuf:"bytes,3,opt,name=doc_name,json=docName,proto3" json:"doc_name,omitempty"`
	ExpireHour int32  `protobuf:"varint,4,opt,name=expire_hour,json=expireHour,proto3" json:"expire_hour,omitempty"`
	CreateTime string `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ViewNum    int32  `protobuf:"varint,6,opt,name=view_num,json=viewNum,proto3" json:"view_num,omitempty"`
	SaveNum    int32  `protobuf:"varint,7,opt,name=save_num,json=saveNum,proto3" json:"save_num,omitempty"`
	DocSize    int64  `protobuf:"varint,8,opt,name=doc_size,json=docSize,proto3" json:"doc_size,omitempty"`
	DocType    string `protobuf:"bytes,9,opt,name=doc_type,json=docType,proto3" json:"doc_type,omitempty"`
	IsDir      int32  `protobuf:"varint,10,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"` // 1 folder, 2 file
	FileNum    int32  `protobuf:"varint,11,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
}

func (x *GetShareDetailRsp) Reset() {
	*x = GetShareDetailRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareDetailRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareDetailRsp) ProtoMessage() {}

func (x *GetShareDetailRsp) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareDetailRsp.ProtoReflect.Descriptor instead.
func (*GetShareDetailRsp) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{27}
}

func (x *GetShareDetailRsp) GetUploader() string {
	if x != nil {
		return x.Uploader
	}
	return ""
}

func (x *GetShareDetailRsp) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *GetShareDetailRsp) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

func (x *GetShareDetailRsp) GetExpireHour() int32 {
	if x != nil {
		return x.ExpireHour
	}
	return 0
}

func (x *GetShareDetailRsp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *GetShareDetailRsp) GetViewNum() int32 {
	if x != nil {
		return x.ViewNum
	}
	return 0
}

func (x *GetShareDetailRsp) GetSaveNum() int32 {
	if x != nil {
		return x.SaveNum
	}
	return 0
}

func (x *GetShareDetailRsp) GetDocSize() int64 {
	if x != nil {
		return x.DocSize
	}
	return 0
}

func (x *GetShareDetailRsp) GetDocType() string {
	if x != nil {
		return x.DocType
	}
	return ""
}

func (x *GetShareDetailRsp) GetIsDir() int32 {
	if x != nil {
		return x.IsDir
	}
	return 0
}

func (x *GetShareDetailRsp) GetFileNum() int32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

type GetShareRecordsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type      int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"` // 0 all,1 share, 2 save
	Offset    int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	StartTime int64  `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64  `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *GetShareRecordsReq) Reset() {
	*x = GetShareRecordsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareRecordsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareRecordsReq) ProtoMessage() {}

func (x *GetShareRecordsReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareRecordsReq.ProtoReflect.Descriptor instead.
func (*GetShareRecordsReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{28}
}

func (x *GetShareRecordsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetShareRecordsReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GetShareRecordsReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetShareRecordsReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetShareRecordsReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetShareRecordsReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type GetShareRecordsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64          `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	List  []*ShareRecord `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetShareRecordsRsp) Reset() {
	*x = GetShareRecordsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareRecordsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareRecordsRsp) ProtoMessage() {}

func (x *GetShareRecordsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareRecordsRsp.ProtoReflect.Descriptor instead.
func (*GetShareRecordsRsp) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{29}
}

func (x *GetShareRecordsRsp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetShareRecordsRsp) GetList() []*ShareRecord {
	if x != nil {
		return x.List
	}
	return nil
}

type ShareRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DocId      string `protobuf:"bytes,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	DocName    string `protobuf:"bytes,3,opt,name=doc_name,json=docName,proto3" json:"doc_name,omitempty"`
	CreateTime int64  `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime int64  `protobuf:"varint,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	Token      string `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	Type       int32  `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ShareRecord) Reset() {
	*x = ShareRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareRecord) ProtoMessage() {}

func (x *ShareRecord) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareRecord.ProtoReflect.Descriptor instead.
func (*ShareRecord) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{30}
}

func (x *ShareRecord) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShareRecord) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *ShareRecord) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

func (x *ShareRecord) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ShareRecord) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *ShareRecord) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ShareRecord) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type GetRecycleBinListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetRecycleBinListReq) Reset() {
	*x = GetRecycleBinListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecycleBinListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecycleBinListReq) ProtoMessage() {}

func (x *GetRecycleBinListReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecycleBinListReq.ProtoReflect.Descriptor instead.
func (*GetRecycleBinListReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{31}
}

func (x *GetRecycleBinListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetRecycleBinListReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetRecycleBinListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type RecycleDocInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId    string `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	DocName  string `protobuf:"bytes,2,opt,name=doc_name,json=docName,proto3" json:"doc_name,omitempty"`
	IsDir    int32  `protobuf:"varint,3,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
	DeleteAt string `protobuf:"bytes,4,opt,name=delete_at,json=deleteAt,proto3" json:"delete_at,omitempty"`
	ExpireAt string `protobuf:"bytes,5,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
}

func (x *RecycleDocInfo) Reset() {
	*x = RecycleDocInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecycleDocInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecycleDocInfo) ProtoMessage() {}

func (x *RecycleDocInfo) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecycleDocInfo.ProtoReflect.Descriptor instead.
func (*RecycleDocInfo) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{32}
}

func (x *RecycleDocInfo) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *RecycleDocInfo) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

func (x *RecycleDocInfo) GetIsDir() int32 {
	if x != nil {
		return x.IsDir
	}
	return 0
}

func (x *RecycleDocInfo) GetDeleteAt() string {
	if x != nil {
		return x.DeleteAt
	}
	return ""
}

func (x *RecycleDocInfo) GetExpireAt() string {
	if x != nil {
		return x.ExpireAt
	}
	return ""
}

type GetRecycleBinListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*RecycleDocInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetRecycleBinListRsp) Reset() {
	*x = GetRecycleBinListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecycleBinListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecycleBinListRsp) ProtoMessage() {}

func (x *GetRecycleBinListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecycleBinListRsp.ProtoReflect.Descriptor instead.
func (*GetRecycleBinListRsp) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{33}
}

func (x *GetRecycleBinListRsp) GetList() []*RecycleDocInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type RecoverDocsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ids    []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *RecoverDocsReq) Reset() {
	*x = RecoverDocsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverDocsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverDocsReq) ProtoMessage() {}

func (x *RecoverDocsReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverDocsReq.ProtoReflect.Descriptor instead.
func (*RecoverDocsReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{34}
}

func (x *RecoverDocsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RecoverDocsReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetClassifiedDocsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type   int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"` // 1: pic, 2: video, 3: music, 4: document
	Offset int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetClassifiedDocsReq) Reset() {
	*x = GetClassifiedDocsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassifiedDocsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassifiedDocsReq) ProtoMessage() {}

func (x *GetClassifiedDocsReq) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassifiedDocsReq.ProtoReflect.Descriptor instead.
func (*GetClassifiedDocsReq) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{35}
}

func (x *GetClassifiedDocsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetClassifiedDocsReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GetClassifiedDocsReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetClassifiedDocsReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ClassifiedDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId    string `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	DocName  string `protobuf:"bytes,2,opt,name=doc_name,json=docName,proto3" json:"doc_name,omitempty"`
	DocSize  int64  `protobuf:"varint,3,opt,name=doc_size,json=docSize,proto3" json:"doc_size,omitempty"`
	DocType  string `protobuf:"bytes,4,opt,name=doc_type,json=docType,proto3" json:"doc_type,omitempty"`
	DocPath  string `protobuf:"bytes,5,opt,name=doc_path,json=docPath,proto3" json:"doc_path,omitempty"`
	CreateAt string `protobuf:"bytes,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	UpdateAt string `protobuf:"bytes,7,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *ClassifiedDoc) Reset() {
	*x = ClassifiedDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassifiedDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassifiedDoc) ProtoMessage() {}

func (x *ClassifiedDoc) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassifiedDoc.ProtoReflect.Descriptor instead.
func (*ClassifiedDoc) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{36}
}

func (x *ClassifiedDoc) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *ClassifiedDoc) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

func (x *ClassifiedDoc) GetDocSize() int64 {
	if x != nil {
		return x.DocSize
	}
	return 0
}

func (x *ClassifiedDoc) GetDocType() string {
	if x != nil {
		return x.DocType
	}
	return ""
}

func (x *ClassifiedDoc) GetDocPath() string {
	if x != nil {
		return x.DocPath
	}
	return ""
}

func (x *ClassifiedDoc) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *ClassifiedDoc) GetUpdateAt() string {
	if x != nil {
		return x.UpdateAt
	}
	return ""
}

type GetClassifiedDocsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ClassifiedDoc `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetClassifiedDocsRsp) Reset() {
	*x = GetClassifiedDocsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diskapis_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassifiedDocsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassifiedDocsRsp) ProtoMessage() {}

func (x *GetClassifiedDocsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_diskapis_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassifiedDocsRsp.ProtoReflect.Descriptor instead.
func (*GetClassifiedDocsRsp) Descriptor() ([]byte, []int) {
	return file_diskapis_proto_rawDescGZIP(), []int{37}
}

func (x *GetClassifiedDocsRsp) GetList() []*ClassifiedDoc {
	if x != nil {
		return x.List
	}
	return nil
}

var File_diskapis_proto protoreflect.FileDescriptor

var file_diskapis_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72,
	0x12, 0x10, 0x06, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x10, 0x06, 0x32, 0x43, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x28, 0x5b, 0x5f, 0x5c, 0x2e, 0x5d, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x29, 0x2a, 0x40, 0x28, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5c, 0x2d, 0x5d, 0x2b, 0x5c, 0x2e, 0x29, 0x2b, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5d, 0x7b, 0x32, 0x2c, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x02, 0x70, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x06, 0x52, 0x02, 0x70,
	0x77, 0x22, 0x56, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x30,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x10, 0x06, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x02, 0x70, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x06, 0x52, 0x02, 0x70, 0x77, 0x22, 0x21, 0x0a, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9b, 0x01, 0x0a,
	0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x10, 0x06, 0x32, 0x0e, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x6c, 0x64, 0x50, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x06, 0x6e, 0x65,
	0x77, 0x5f, 0x70, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x06, 0x52, 0x05, 0x6e, 0x65, 0x77, 0x50, 0x77, 0x22, 0x45, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x30, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x10, 0x06, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xea, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc9,
	0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x10,
	0x06, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2a,
	0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa,
	0x42, 0x49, 0x72, 0x47, 0x10, 0x06, 0x32, 0x43, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x28, 0x5b, 0x5f, 0x5c, 0x2e, 0x5d, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x29, 0x2a, 0x40, 0x28, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5c, 0x2d, 0x5d, 0x2b, 0x5c, 0x2e, 0x29, 0x2b, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x5d, 0x7b, 0x32, 0x2c, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x10, 0x06, 0x32, 0x0e, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x7d, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x68, 0x69, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x48, 0x69, 0x64, 0x65,
	0x22, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x61, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xde, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x78, 0x0a,
	0x10, 0x4d, 0x61, 0x6b, 0x65, 0x4e, 0x65, 0x77, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x64, 0x69, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65,
	0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0x22, 0x0a, 0x10, 0x4d, 0x61, 0x6b, 0x65, 0x4e,
	0x65, 0x77, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x0f, 0x53,
	0x65, 0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x69, 0x64,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x68, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x13, 0x4d, 0x6f,
	0x76, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x3a, 0x0a, 0x0d,
	0x53, 0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x3a, 0x0a, 0x0d, 0x48, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0x6d, 0x0a, 0x09, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65,
	0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x22, 0x6c, 0x0a, 0x0d, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x22, 0x6c, 0x0a, 0x0d, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22,
	0x61, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x48, 0x6f,
	0x75, 0x72, 0x22, 0x42, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x5b, 0x0a, 0x16, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x45, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xc1, 0x02, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f,
	0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x61, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73,
	0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xa9,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x0b, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x44, 0x6f, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x44, 0x69,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x22, 0x3b, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x1a, 0x08, 0x30, 0x01, 0x30, 0x02,
	0x30, 0x03, 0x30, 0x04, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x64, 0x6f, 0x63, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x64, 0x6f, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x3a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x73, 0x70, 0x12,
	0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x32, 0xf0, 0x0c, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x0e, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x0e, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x73,
	0x70, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x2d, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x3a, 0x01, 0x2a, 0x12, 0x58, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72, 0x73, 0x41,
	0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72,
	0x73, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x73,
	0x70, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x5e,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x11, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2f, 0x7b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x51,
	0x0a, 0x0d, 0x4d, 0x61, 0x6b, 0x65, 0x4e, 0x65, 0x77, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x11, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x4e, 0x65, 0x77, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x11, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x4e, 0x65, 0x77, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x73, 0x70, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f,
	0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6b, 0x64, 0x69, 0x72, 0x3a, 0x01,
	0x2a, 0x12, 0x59, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x44, 0x6f,
	0x63, 0x12, 0x10, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x44, 0x6f, 0x63,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x73,
	0x65, 0x74, 0x2d, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a, 0x10,
	0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x12, 0x14, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2f, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x54, 0x0a, 0x0b,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x0f, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x3a,
	0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2d, 0x62, 0x69, 0x6e, 0x12, 0x51,
	0x0a, 0x0a, 0x53, 0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x56, 0x0a, 0x0a, 0x48, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x0e, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22,
	0x15, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x2d,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x49, 0x0a, 0x06, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0a, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22,
	0x10, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x3a, 0x01, 0x2a, 0x12, 0x4f, 0x0a, 0x0a, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x0e, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x4f, 0x0a, 0x0a, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x6f, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x0e, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x63,
	0x6f, 0x70, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x52, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x0f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x73, 0x70, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22,
	0x16, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x13, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x17, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x2d, 0x66, 0x72, 0x6f, 0x6d, 0x2d,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x13, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x73, 0x70, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x59, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x2f, 0x7b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x7d, 0x12, 0x69, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x73,
	0x12, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x73, 0x70, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x32, 0x92, 0x04, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x70,
	0x3a, 0x01, 0x2a, 0x12, 0x3d, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x0a, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x69, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0x5b, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x2d, 0x70, 0x77, 0x3a, 0x01, 0x2a, 0x12,
	0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x6b, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x2e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x27, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x44, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x27, 0x5a, 0x25, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x70,
	0x72, 0x6f, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x75, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_diskapis_proto_rawDescOnce sync.Once
	file_diskapis_proto_rawDescData = file_diskapis_proto_rawDesc
)

func file_diskapis_proto_rawDescGZIP() []byte {
	file_diskapis_proto_rawDescOnce.Do(func() {
		file_diskapis_proto_rawDescData = protoimpl.X.CompressGZIP(file_diskapis_proto_rawDescData)
	})
	return file_diskapis_proto_rawDescData
}

var file_diskapis_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_diskapis_proto_goTypes = []interface{}{
	(*RegisterNewUserReq)(nil),     // 0: RegisterNewUserReq
	(*SignInReq)(nil),              // 1: SignInReq
	(*SignInRsp)(nil),              // 2: SignInRsp
	(*ModifyPasswordReq)(nil),      // 3: ModifyPasswordReq
	(*GetUserProfileReq)(nil),      // 4: GetUserProfileReq
	(*GetUserProfileRsp)(nil),      // 5: GetUserProfileRsp
	(*ModifyUserProfileReq)(nil),   // 6: ModifyUserProfileReq
	(*UpdateUserStorageReq)(nil),   // 7: UpdateUserStorageReq
	(*UploadFileReq)(nil),          // 8: UploadFileReq
	(*UploadFileRsp)(nil),          // 9: UploadFileRsp
	(*GetDirsAndFilesReq)(nil),     // 10: GetDirsAndFilesReq
	(*GetDirsAndFilesRsp)(nil),     // 11: GetDirsAndFilesRsp
	(*GetFileDetailReq)(nil),       // 12: GetFileDetailReq
	(*GetFileDetailRsp)(nil),       // 13: GetFileDetailRsp
	(*MakeNewFolderReq)(nil),       // 14: MakeNewFolderReq
	(*MakeNewFolderRsp)(nil),       // 15: MakeNewFolderRsp
	(*SetHiddenDocReq)(nil),        // 16: SetHiddenDocReq
	(*MoveToRecycleBinReq)(nil),    // 17: MoveToRecycleBinReq
	(*SoftDeleteReq)(nil),          // 18: SoftDeleteReq
	(*HardDeleteReq)(nil),          // 19: HardDeleteReq
	(*RenameReq)(nil),              // 20: RenameReq
	(*MoveToPathReq)(nil),          // 21: MoveToPathReq
	(*CopyToPathReq)(nil),          // 22: CopyToPathReq
	(*CreateShareReq)(nil),         // 23: CreateShareReq
	(*CreateShareRsp)(nil),         // 24: CreateShareRsp
	(*RetrieveShareToPathReq)(nil), // 25: RetrieveShareToPathReq
	(*GetShareDetailReq)(nil),      // 26: GetShareDetailReq
	(*GetShareDetailRsp)(nil),      // 27: GetShareDetailRsp
	(*GetShareRecordsReq)(nil),     // 28: GetShareRecordsReq
	(*GetShareRecordsRsp)(nil),     // 29: GetShareRecordsRsp
	(*ShareRecord)(nil),            // 30: ShareRecord
	(*GetRecycleBinListReq)(nil),   // 31: GetRecycleBinListReq
	(*RecycleDocInfo)(nil),         // 32: RecycleDocInfo
	(*GetRecycleBinListRsp)(nil),   // 33: GetRecycleBinListRsp
	(*RecoverDocsReq)(nil),         // 34: RecoverDocsReq
	(*GetClassifiedDocsReq)(nil),   // 35: GetClassifiedDocsReq
	(*ClassifiedDoc)(nil),          // 36: ClassifiedDoc
	(*GetClassifiedDocsRsp)(nil),   // 37: GetClassifiedDocsRsp
	(*structpb.Struct)(nil),        // 38: google.protobuf.Struct
	(*emptypb.Empty)(nil),          // 39: google.protobuf.Empty
}
var file_diskapis_proto_depIdxs = []int32{
	38, // 0: GetDirsAndFilesRsp.details:type_name -> google.protobuf.Struct
	30, // 1: GetShareRecordsRsp.list:type_name -> ShareRecord
	32, // 2: GetRecycleBinListRsp.list:type_name -> RecycleDocInfo
	36, // 3: GetClassifiedDocsRsp.list:type_name -> ClassifiedDoc
	8,  // 4: FileService.UploadFile:input_type -> UploadFileReq
	10, // 5: FileService.GetDirsAndFiles:input_type -> GetDirsAndFilesReq
	12, // 6: FileService.GetFileDetail:input_type -> GetFileDetailReq
	14, // 7: FileService.MakeNewFolder:input_type -> MakeNewFolderReq
	16, // 8: FileService.SetHiddenDoc:input_type -> SetHiddenDocReq
	17, // 9: FileService.MoveToRecycleBin:input_type -> MoveToRecycleBinReq
	34, // 10: FileService.RecoverDocs:input_type -> RecoverDocsReq
	31, // 11: FileService.GetRecycleBinList:input_type -> GetRecycleBinListReq
	18, // 12: FileService.SoftDelete:input_type -> SoftDeleteReq
	19, // 13: FileService.HardDelete:input_type -> HardDeleteReq
	20, // 14: FileService.Rename:input_type -> RenameReq
	21, // 15: FileService.MoveToPath:input_type -> MoveToPathReq
	22, // 16: FileService.CopyToPath:input_type -> CopyToPathReq
	23, // 17: FileService.CreateShare:input_type -> CreateShareReq
	25, // 18: FileService.RetrieveShareToPath:input_type -> RetrieveShareToPathReq
	28, // 19: FileService.GetShareRecords:input_type -> GetShareRecordsReq
	26, // 20: FileService.GetShareDetail:input_type -> GetShareDetailReq
	35, // 21: FileService.GetClassifiedDocs:input_type -> GetClassifiedDocsReq
	0,  // 22: AuthService.RegisterNewUser:input_type -> RegisterNewUserReq
	1,  // 23: AuthService.SignIn:input_type -> SignInReq
	3,  // 24: AuthService.ModifyPassword:input_type -> ModifyPasswordReq
	4,  // 25: AuthService.GetUserProfile:input_type -> GetUserProfileReq
	6,  // 26: AuthService.ModifyUserProfile:input_type -> ModifyUserProfileReq
	7,  // 27: AuthService.UpdateUserStorage:input_type -> UpdateUserStorageReq
	9,  // 28: FileService.UploadFile:output_type -> UploadFileRsp
	11, // 29: FileService.GetDirsAndFiles:output_type -> GetDirsAndFilesRsp
	13, // 30: FileService.GetFileDetail:output_type -> GetFileDetailRsp
	15, // 31: FileService.MakeNewFolder:output_type -> MakeNewFolderRsp
	39, // 32: FileService.SetHiddenDoc:output_type -> google.protobuf.Empty
	39, // 33: FileService.MoveToRecycleBin:output_type -> google.protobuf.Empty
	39, // 34: FileService.RecoverDocs:output_type -> google.protobuf.Empty
	33, // 35: FileService.GetRecycleBinList:output_type -> GetRecycleBinListRsp
	39, // 36: FileService.SoftDelete:output_type -> google.protobuf.Empty
	39, // 37: FileService.HardDelete:output_type -> google.protobuf.Empty
	39, // 38: FileService.Rename:output_type -> google.protobuf.Empty
	39, // 39: FileService.MoveToPath:output_type -> google.protobuf.Empty
	39, // 40: FileService.CopyToPath:output_type -> google.protobuf.Empty
	24, // 41: FileService.CreateShare:output_type -> CreateShareRsp
	39, // 42: FileService.RetrieveShareToPath:output_type -> google.protobuf.Empty
	29, // 43: FileService.GetShareRecords:output_type -> GetShareRecordsRsp
	27, // 44: FileService.GetShareDetail:output_type -> GetShareDetailRsp
	37, // 45: FileService.GetClassifiedDocs:output_type -> GetClassifiedDocsRsp
	39, // 46: AuthService.RegisterNewUser:output_type -> google.protobuf.Empty
	2,  // 47: AuthService.SignIn:output_type -> SignInRsp
	39, // 48: AuthService.ModifyPassword:output_type -> google.protobuf.Empty
	5,  // 49: AuthService.GetUserProfile:output_type -> GetUserProfileRsp
	39, // 50: AuthService.ModifyUserProfile:output_type -> google.protobuf.Empty
	39, // 51: AuthService.UpdateUserStorage:output_type -> google.protobuf.Empty
	28, // [28:52] is the sub-list for method output_type
	4,  // [4:28] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_diskapis_proto_init() }
func file_diskapis_proto_init() {
	if File_diskapis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_diskapis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterNewUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserProfileRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyUserProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserStorageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDirsAndFilesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDirsAndFilesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileDetailRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeNewFolderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeNewFolderRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHiddenDocReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveToRecycleBinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveToPathReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyToPathReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShareRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveShareToPathReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareDetailRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareRecordsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareRecordsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecycleBinListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecycleDocInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecycleBinListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverDocsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassifiedDocsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassifiedDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diskapis_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassifiedDocsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_diskapis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_diskapis_proto_goTypes,
		DependencyIndexes: file_diskapis_proto_depIdxs,
		MessageInfos:      file_diskapis_proto_msgTypes,
	}.Build()
	File_diskapis_proto = out.File
	file_diskapis_proto_rawDesc = nil
	file_diskapis_proto_goTypes = nil
	file_diskapis_proto_depIdxs = nil
}
