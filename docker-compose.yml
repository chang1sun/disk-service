# 服务容器配置
services:
  golang:                                # 自定义容器名称
    build: .                             # 构建目录
    ports:                               # 设置端口映射
      - "8000:8000"
      - "8001:8001"
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    volumes:
      - "${TLS_PATH}:/tls"
    tty: true
    restart: always                      # 指定容器退出后的重启策略为始终重启
    depends_on: 
      - mysql
      - redis
      - mongodb

  mysql:
    image: "mysql:latest"
    platform: linux/amd64
    environment:
      - TZ=${TZ}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}    # 设置 Mysql root 用户密码
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    volumes:
      - ${DATA_PATH}/mysql:/var/lib/mysql:rw        # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Mysql 数据的目录挂载到容器中 /var/lib/mysql 目录
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - "${MYSQL_PORT}:3306"                          # 设置容器3306端口映射指定宿主机端口
    restart: always

  redis:
    image: "redis:alpine"
    command: redis-server --appendonly yes
    environment:
      - TZ=${TZ}
    volumes:
      - ${DATA_PATH}/redis:/data                 # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    ports:
      - "${REDIS_PORT}:6379"                          # 设置容器6379端口映射指定宿主机端口
    restart: always
  
  mongodb:
    image: "mongo:latest"
    environment:
      - TZ=${TZ}
    volumes:
      - "${DATA_PATH}/mongo:/data/db"
      - "./database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro"
    ports:
      - "${MONGO_PORT}:27017"
    restart: always

  nginx:
    build: ./nginx
    environment:
      - TZ=${TZ}
    volumes:
      - "${VIEW_PATH}:/dist"
      - "${TLS_PATH}:/etc/nginx/perm"
    # ports:
    #   - "80:80"
    #   - "443:443"
    network_mode: "host"
    restart: always
    depends_on:
      - golang
      - preview

  preview:
    image: "keking/kkfileview:v2.2.2"
    ports:
      - "${PREVIEW_PORT}:8012"
    restart: always
